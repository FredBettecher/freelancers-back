generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProfileSkills {
  id        Int       @id @default(autoincrement())
  profileId Int?
  skillId   Int?
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  profiles  Profiles? @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skills    Skills?   @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profiles {
  id             Int             @id @default(autoincrement())
  userId         Int?
  profilePicture String?
  bio            String?
  occupation     String?         @db.VarChar(100)
  experience     String?
  location       String?         @db.VarChar(100)
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @db.Timestamptz(6)
  profileSkills  ProfileSkills[]
  users          Users?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Services {
  id                  Int                   @id
  title               String                @db.VarChar(255)
  description         String
  category            Int?
  price               Int
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime?             @db.Timestamptz(6)
  servicesCategories  ServicesCategories?   @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  servicesAvaliations ServicesAvaliations[]
  userServices        UserServices[]
}

model ServicesAvaliations {
  id          Int       @id @default(autoincrement())
  userId      Int?
  serviceId   Int?
  priceRate   Int
  qualityRate Int
  comment     String?
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @db.Timestamptz(6)
  services    Services? @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ServicesCategories {
  id        Int        @id
  name      String     @db.VarChar(255)
  createdAt DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?  @db.Timestamptz(6)
  services  Services[]
}

model Skills {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String?
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @db.Timestamptz(6)
  profileSkills ProfileSkills[]
}

model UserServices {
  id        Int       @id @default(autoincrement())
  userId    Int?
  serviceId Int?
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  services  Services? @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  email               String                @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime?             @db.Timestamptz(6)
  profiles            Profiles[]
  servicesAvaliations ServicesAvaliations[]
  userServices        UserServices[]
}
